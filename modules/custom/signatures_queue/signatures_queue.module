<?php

/**
 * @file
 * The signature queue system.
 *
 * Provides SignaturesQueue class, configuration for signatures queues, and a
 * queue monitoring dashboard.
 */

/**
 * The default workflow batch size.
 */
define('SIGNATURES_QUEUE_BATCH_SIZE_DEFAULT', 10);

/**
 * The default value for the signatures_queue_log_events variable.
 */
define('SIGNATURES_QUEUE_LOG_EVENTS_DEFAULT', TRUE);

/**
 * The default value for the server-name event logging value.
 */
define('SIGNATURES_QUEUE_SERVER_NAME_DEFAULT', 'default');

/**
 * The default value for the worker-name event logging value.
 */
define('SIGNATURES_QUEUE_WORKER_NAME_DEFAULT', 'default');

/**
 * Implements hook_menu().
 */
function signatures_queue_menu() {
  $items = array();

  $items['admin/config/system/signatures-queue'] = array(
    'title' => 'Petition Signatures Queue',
    'description' => 'Overview of petition signatures queue system',
    'page callback' => 'signatures_queue_overview',
    'access arguments' => array('monitor queues'),
    'file' => 'signatures_queue.pages.inc',
  );
  $items['admin/config/system/signatures-queue/monitor'] = array(
    'title' => 'Monitor',
    'description' => 'Monitor signature queues',
    'page callback' => 'signatures_queue_monitor_page',
    'access arguments' => array('monitor queues'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'signatures_queue.pages.inc',
  );
  $items['admin/config/system/signatures-queue/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure signature queues',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('signatures_queue_configure'),
    'access arguments' => array('administer queues'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'signatures_queue.admin.inc',
  );
  $items['admin/config/development/generate/signatures'] = array(
    'title' => 'Generate signatures',
    'description' => 'Generate signature records in signatures queues',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('signatures_queue_generate_form'),
    'access arguments' => array('administer queues'),
    'weight' => 6,
    'file' => 'signatures_queue.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function signatures_queue_permission() {
  return array(
    'administer queues' => array(
      'title' => t('Administer signatures queue'),
    ),
    'monitor queues' => array(
      'title' => t('Monitor signatures queue'),
    ),
  );
}

/**
 * Implements hook_mail().
 */
function signatures_queue_mail($key, &$message, $params) {
  if ($key == 'initiate_signature_validation') {
    // TODO PT-978 Grab admin-defined email message. Replace tokens with dynamic
    // content. Here's a placeholder:
    $signature = $params['signature info'];
    $validation_link = l(
      t('Click HERE to validate your signature'),
      sprintf('thank-you/%s/%s', $signature['md5_encryption_key'], $signature['secret_validation_key']),
      array('query' => array('pid' => $signature['petition_id']))
    );
    $message['subject'] = 'TODO Validation email subject goes here.';
    $message['body'][] = "Here's a validation link: $validation_link.";
  }
}

/**
 * Generate dummy data in signature queues.
 */
function signatures_queue_generate($queue_name, $number = 10, $delete_first = FALSE) {
  // If Drupal didn't autoload SignaturesQueue, load it manually here.
  if (!class_exists('SignaturesQueue')) {
    module_load_include('inc', 'signatures_queue', 'classes/SignaturesQueue');
  }

  // Remove all items first.
  if ($delete_first) {
    $queue = SignaturesQueue::get($queue_name);
    // There is no harm in trying to recreate existing.
    $queue->createQueue();
    $count = $queue->numberOfItems();
    $queue->deleteQueue();
    $text = t('@name: This queue was deleted with @count items remaining in it.',
      array('@name' => $queue_name, '@count' => $count)
    );
    drupal_set_message($text);
  }

  // Generate items.
  $queue = SignaturesQueue::get($queue_name);
  // There is no harm in trying to recreate existing.
  $queue->createQueue();
  for ($i = 0; $i < $number; $i++) {
    $item = SignaturesQueue::getDummyItem($queue_name);
    $queue->createItem($item);
  }
  $text = t('@name: @number items have been created.',
    array('@name' => $queue_name, '@number' => $number)
  );
  drupal_set_message($text);

}

/**
 * Implements hook_shunt().
 */
function signatures_queue_shunt() {
  // Automatically declare a shunt for each workflow.
  $shunts = array();
  $workflows = signatures_queue_get_workflow_names();
  foreach ($workflows as $workflow) {
    $name = "signatures_queue_{$workflow}";
    $description = t('A shunt for the "@workflow" workflow.', array(
      '@workflow' => str_replace('_', ' ', ucfirst($workflow)),
    ));
    $shunts[$name] = $description;
  }
  return $shunts;
}

/**
 * Gets an array of queue names.
 *
 * Note: Real queues are named something_queue. The tables listed here that
 * don't end in the suffix "_queue" aren't actually queues. Conceptually
 * they're part of the "signatures queue" in the sense that these are holding
 * bins where signatures go before they're done being processed and counted.
 * But they're not DrupalQueue queues.
 *
 * @return array
 *   Array of signature queues and descriptions keyed by queue name.
 */
function signatures_queue_get_queue_names() {
  return array(
    'signatures_submitted_queue' => t('Queue submissions received via API POST requests or form submissions by unauthenticated users.'),
    'signatures_pending_validation_queue' => t('Retrieve petitons from signatures_submitted_queue, send a validation email, then move the pending signature here.'),
    'signatures_validated_queue' => t('When a user clicks a validation link received via email, store the secret validation key here.'),
    'signatures_validated' => t('Move records from signatures_validated_queue to here for processing.'),
    'signatures_pending_validation' => t('Move records from signatures_pending_validation_queue to here for processing.'),
    'signatures_orphans' => t('When processing validated signatures, records in signatures_validated that do not have matching records in signatures_pending_validation are orphans.'),
  );
}

/**
 * Gets a list of workflow names.
 *
 * @return array
 *   An indexed array of workflow names.
 */
function signatures_queue_get_workflow_names() {
  return array(
    'receive_new_signatures',
    'initiate_signature_validation',
    'receive_signature_validation',
    'preprocess_signatures',
    'process_signatures',
    'archive_signatures',
  );
}

/**
 * Invokes a given workflow.
 *
 * @param string $workflow
 *   The name of the workflow to invoke, as defined in
 *   signatures_queue_get_workflow_names().
 * @param string $server_name
 *   The name of the server processing the workflow.
 * @param string $worker_name
 *   An arbitrary identifier for the invoking process (e.g., cron job).
 *
 * @return bool
 *   Returns TRUE if the workflow was successfully processed or FALSE if not.
 */
function signatures_queue_invoke_workflow($workflow, $server_name = SIGNATURES_QUEUE_SERVER_NAME_DEFAULT, $worker_name = SIGNATURES_QUEUE_WORKER_NAME_DEFAULT) {
  // Fail if given workflow is invalid.
  if (!in_array($workflow, signatures_queue_get_workflow_names())) {
    return FALSE;
  }

  // Detect a shunt trip.
  $shunt_name = "signatures_queue_{$workflow}";
  if (shunt_is_enabled($shunt_name)) {
    // Return TRUE because the workflow didn't fail--it was deliberately
    // deferred, which isn't properly an error condition.
    return TRUE;
  }

  // Invoke the workflow.
  module_load_include('inc', 'signatures_queue', "includes/{$workflow}");
  $function_name = "signatures_queue_{$workflow}";
  $success = FALSE;
  if (function_exists($function_name)) {
    module_load_include('inc', 'signatures_queue');

    // Log job start.
    $job_id = _signatures_queue_create_job_id($workflow, $server_name, $worker_name);
    _signatures_queue_log_event($job_id, $workflow, $server_name, $worker_name, 'started');

    // Dispatch the worker.
    $success = call_user_func($function_name, $job_id, $server_name, $worker_name);

    // Log job completion.
    _signatures_queue_log_event($job_id, $workflow, $server_name, $worker_name, 'completed');
  }
  return $success;
}

/**
 * Set active database according to settings.php configuration.
 *
 * Don't forget to call db_set_active() to set back to default after using this.
 */
function signatures_queue_set_db($conf_name = 'signatures_processing') {
  global $databases;
  if (!empty($databases[$conf_name])) {
    // Set database so that we create the tables there.
    db_set_active($conf_name);
  }
}
