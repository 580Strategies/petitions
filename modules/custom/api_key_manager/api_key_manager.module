<?php

/**
 * @file
 * This is the main module file for API Key Manager.
 */

define('API_KEY_MANAGER_SHUNT', 'shunt_api_key_manager');

/**
 * Implements hook_views_api().
 */
function api_key_manager_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_menu().
 */
function api_key_manager_menu() {
  $items = array();
  $items['user/%user/api_keys'] = array(
    'title' => 'API Keys',
    'page callback' => '_api_key_manager_user_page',
    'page arguments' => array(1),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Gets an API Key.
 *
 * The API Key node object is cached indefinitely to prevent return trips to the
 * database for the same information.
 *
 * @param string $api_key
 *   An API Key.
 *
 * @return object
 *   A fully-populated node object, or an empty object if the node is not found.
 */
function api_key_manager_get_key($api_key) {
  $key = &drupal_static(__FUNCTION__ . $api_key);
  if (!isset($key)) {
    if ($cache = cache_get("api_key:{$api_key}", 'cache_petitions_api_keys')) {
      $key = $cache->data;
    }
    else {
      // Search for a node with the given key value.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'key')
        ->fieldCondition('field_api_key_manager_key', 'value', $api_key, '=')
        ->fieldCondition('field_api_key_manager_status', 'value', 'approved', '=')
        // Run the query as user 1.
        ->addMetaData('account', user_load(1));
      $result = $query->execute();

      // If the node exists, return it.
      if (isset($result['node'])) {
        $key = node_load(current(array_keys($result['node'])));
      }
      // If no such node exists, return an empty array.
      else {
        $key = new stdClass();
      }

      // Cache the result.
      cache_set("api_key:{$api_key}", $key, 'cache_petitions_api_keys', CACHE_PERMANENT);
    }
  }
  return $key;
}

/**
 * Implements hook_flush_caches().
 */
function api_key_manager_flush_caches() {
  return array('cache_petitions_api_keys');
}

/**
 * Clear cache of specified api_key.
 *
 * @param string $api_key
 *   An API Key.
 */
function api_key_manager_clear_cached_api_key($api_key) {
  // Assuming a cache clear is more expensive than a get, we check
  // if it is cached before clearing.
  if (cache_get("api_key:{$api_key}", 'cache_petitions_api_keys')) {
    cache_clear_all("api_key:{$api_key}", 'cache_petitions_api_keys');
  }
}

/**
 * Freshen cache of specified api_key.
 *
 * @param string $api_key
 *   An API Key.
 */
function api_key_manager_freshen_cached_api_key($api_key) {
  // Clear the API Key from cache.
  api_key_manager_clear_cached_api_key($api_key);

  // Reload the API Key into cache.
  api_key_manager_get_key($api_key);
}

/**
 * Define a hook that other modules can implement.
 *
 * @param string $key
 *   API key
 *
 * @return string
 *   Name of the person or organization who registered the API key.
 */
function api_key_manager_get_name($key) {
  $names = module_invoke_all('api_key_manager_name_for_key', $key);
  return $names[0];
}

/**
 * Define a hook that other modules can implement.
 *
 * @param string $key
 *   API key
 *
 * @return string
 *   URL associated to the API key.
 */
function api_key_manager_get_url($key) {
  $urls = module_invoke_all('api_key_manager_url_for_key', $key);
  return $urls[0];
}

/**
 * Implements hook_shunt().
 */
function api_key_manager_shunt() {
  return array(
    API_KEY_MANAGER_SHUNT => 'Shunt for creating API keys nodes.',
  );
}

/**
 * Implements hook_shunt_enable().
 */
function api_key_manager_shunt_enable($name) {
  if ($name == API_KEY_MANAGER_SHUNT) {
    // @todo: Message necessary?
  }
}

/**
 * Implements hook_node_access().
 *
 * Sets default permissions for authenticated user and administrator roles.
 */
function api_key_manager_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  // Check to see if the content type is API Key.
  if ($type == 'key' && $op == 'view') {
    // Define roles that can view API Keys.
    global $user;
    $allowed_roles = array_intersect(
      array(
        'administrator',
      ),
      array_values($user->roles)
    );

    // Define the current node author UID and current user UID.
    $node_author = $node->uid;
    $current_user = $user->uid;

    // If the user has one of these roles, allow them node access.
    if ($allowed_roles || $current_user == $node_author) {
      return NODE_ACCESS_ALLOW;
    }
    else {
      return NODE_ACCESS_DENY;
    }
  }
  if ($type == 'key' && $op == 'create') {
    // Define roles that can create API Keys.
    global $user;
    $allowed_roles = array_intersect(
      array(
        'authenticated user',
        'administrator',
      ),
      array_values($user->roles)
    );
    // If the user has one of these roles, allow them node access.
    if ($allowed_roles) {
      return NODE_ACCESS_ALLOW;
    }
    else {
      return NODE_ACCESS_DENY;
    }
  }
  if ($type == 'key' && ($op == 'delete' || $op == 'update')) {
    // Define roles that can delete and update API Keys.
    global $user;
    $allowed_roles = array_intersect(
      array(
        'administrator',
      ),
      array_values($user->roles)
    );
    // If the user has one of these roles, allow them node access.
    if ($allowed_roles) {
      return NODE_ACCESS_ALLOW;
    }
    else {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_permission().
 */
function api_key_manager_permission() {
  return array(
    'administer api keys' => array(
      'title' => t('Administer API Keys'),
      'description' => t('Allow users to administer API keys'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function api_key_manager_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'key_node_form' && shunt_is_enabled(API_KEY_MANAGER_SHUNT)) {
    global $user;
    if (!in_array('administrator', $user->roles)) {
      drupal_access_denied();
    }
  }

  switch ($form_id) {
    case 'key_node_form':
      // Provides a form description at the top of the form.
      $form['form_description'] = array(
        '#markup' => '<p>Submit the form below to request an API key for your application.</p>',
        '#weight' => -6,
      );

      $form['title'] = array(
        '#disabled' => TRUE,
        '#required' => FALSE,
      );

      // Hides key and status fields from users without the administer_api_keys
      // role.
      if (!user_access('administer api keys')) {
        $form['field_api_key_manager_key']['#type'] = 'hidden';
        $form['field_api_key_manager_key']['#disabled'] = TRUE;
        $form['field_api_key_manager_status']['#type'] = 'hidden';
        $form['field_api_key_manager_status']['#disabled'] = TRUE;
      }

      // Add URL validation to Application URL field.
      $form['field_api_key_manager_url']['#element_validate'][] = '_api_key_manager_key_url_validate';

      // Add submit handler for DSM message.
      $form['#submit'][] = 'api_key_manager_key_node_form_submit';
      break;

    case 'user_admin_permissions':
      // Define description to be used be fields.
      $description = 'This permission does not need to be set because it is managed by the api_key_manager module.';

      // Added descriptions to the api_key_manager module related fields letting
      // the user know that they do not need to be set.
      $form['permission']['create key content']['#description'] = $description;
      $form['permission']['edit own key content']['#description'] = $description;
      $form['permission']['edit any key content']['#description'] = $description;
      $form['permission']['delete own key content']['#description'] = $description;
      $form['permission']['delete any key content']['#description'] = $description;
      break;
  }
}

/**
 * Element validate callback for Application URL field.
 */
function _api_key_manager_key_url_validate($element, &$form_state) {
  if (!valid_url($element[LANGUAGE_NONE][0]['value']['#value'], TRUE)) {
    form_error($element, t('A valid URL is required.'));
  }
}

/**
 * Implements hook_submit().
 *
 * Provides a message upon submit notifying the user that they have successfully
 * submitted their application and will be notified once it has been reviewed.
 */
function api_key_manager_key_node_form_submit($form, &$form_state) {
  drupal_get_messages('status', TRUE);
  drupal_set_message('Thank you for submitting your request for an API Key. You will be notified via email once your request has been reviewed.');
}

/**
 * Implements hook_node_presave().
 */
function api_key_manager_node_presave($node) {
  // Make shunt available to programmatic methods of saving keys.
  if ($node->type == 'key' && shunt_is_enabled(API_KEY_MANAGER_SHUNT)) {
    global $user;
    if (!in_array('administrator', $user->roles)) {
      drupal_access_denied();
    }
  }

  if ($node->type == 'key') {
    // Set the title if the node is new.
    if ($node->is_new) {
      $node->title = $node->uid . ' - ' . $node->field_api_key_manager_name[$node->language][0]['value'];
    }

    // Freshen cache of specified api_key.
    $keys = array(
      'old_key' => $node->original->field_api_key_manager_key[LANGUAGE_NONE][0]['value'],
      'new_key' => $node->field_api_key_manager_key[LANGUAGE_NONE][0]['value'],
    );
    // If the API Key has changed, clear the cache for both values.
    if ($keys['new_key'] != $keys['old_key']) {
      foreach ($keys as $key) {
        api_key_manager_freshen_cached_api_key($key);
      }
    }
    // If the API Key has not changed, clear the cache for the original value.
    else {
      api_key_manager_freshen_cached_api_key($keys['old_key']);
    }

    // Send email on key node status change.
    global $language;
    $user_mail = user_load($node->uid)->mail;
    $module = 'api_key_manager';
    $action = $node->field_api_key_manager_status[LANGUAGE_NONE][0]['value'];
    $key = !empty($node->field_api_key_manager_key[LANGUAGE_NONE][0]['value']) ? $node->field_api_key_manager_key[LANGUAGE_NONE][0]['value'] : t('Key has not been set yet');
    $result = drupal_mail($module, $action, $user_mail, $language, array('api_key' => $key));
  }
}

/**
 * Implements hook_node_insert().
 */
function api_key_manager_node_insert($node) {
  if ($node->type == 'key') {
    if ($node->is_new) {
      $node->path['pathauto'] = FALSE;
      $path = array(
        'source' => 'node/' . $node->nid,
        'alias' => 'user/key/' . $node->uid . '-' . str_replace(' ', '-', $node->field_api_key_manager_name[$node->language][0]['value']),
      );
      path_save($path);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function api_key_manager_node_delete($node) {
  if ($node->type == 'key') {
    // Freshen cache of specified api_key.
    $api_key = $node->field_api_key_manager_key[LANGUAGE_NONE][0]['value'];
    api_key_manager_freshen_cached_api_key($api_key);
  }
}

/**
 * Implements hook_mail().
 */
function api_key_manager_mail($key, &$message, $params) {
  $language = $message['language'];
  switch ($key) {
    case 'blocked':
      $message['subject'] = t('Your Application has been blocked');
      $message['body'][] = t('Your Application has been blocked.');
      break;

    case 'rejected':
      $message['subject'] = t('Your Application has been rejected');
      $message['body'][] = t('Your Application has been rejected.');
      break;

    case 'approved':
      $message['subject'] = t('Your Application has been approved');
      $message['body'][] = t('Your Application has been approved. This is your new key @key', array('@key' => check_plain($params['api_key'])));
      break;

    default:
      break;
  }
}

/**
 * Callback to display current API keys in users pages.
 *
 * @param object $user
 *   The $user object.
 *
 * @return array
 *   Renderable array for the display table.
 */
function _api_key_manager_user_page($user) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'key')
  ->propertyCondition('uid', $user->uid)
  ->propertyCondition('status', 1);
  $result = $query->execute();

  if (empty($result['node'])) {
    return t('No keys have been created yet.');
  }

  $display_rows = array();
  $nodes = entity_load('node', array_keys($result['node']));
  foreach ($nodes as $node) {
    $display_rows[] = array(
      $node->field_api_key_manager_name[LANGUAGE_NONE][0]['value'],
      $node->field_api_key_manager_url[LANGUAGE_NONE][0]['value'],
      !empty($node->field_api_key_manager_key[LANGUAGE_NONE][0]['value']) ? $node->field_api_key_manager_key[LANGUAGE_NONE][0]['value'] : t('No key has been created yet'),
      $node->field_api_key_manager_status[LANGUAGE_NONE][0]['value'],
    );
  }

  // Sanitize output.
  foreach ($display_rows as $row => $row_values) {
    foreach ($row_values as $field => $field_value) {
      $display_rows[$row][$field] = check_plain($field_value);
    }
  }

  $table = array(
    '#theme' => 'table',
    '#header' => array(
      t('Application Name'),
      t('Application URL'),
      t('API Key'),
      t('Status'),
    ),
    '#rows' => $display_rows,
  );

  return $table;
}

/**
 * Provides is_not_cached rule by akm_is_not_cached_api_key_pages().
 *
 * @return array
 *   A multidimensional array.
 *
 * @see is_not_cached.api.php
 */
function api_key_manager_is_not_cached_rules() {
  return array(
    'akm_is_not_cached_api_key_pages' => t("API Key pages"),
  );
}

/**
 * Callback for is_not_cached module. Do not cache api key pages.
 */
function akm_is_not_cached_api_key_pages() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
    $node = node_load($nid);
    if ($node->type == 'key') {
      return TRUE;
    }
  }
}
